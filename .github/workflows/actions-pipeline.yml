name: CI

on:
  push:
    branches:
      - "master"
      - "task/**"
  pull_request:
    branches:
      - "master"
      - "task/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # maven-compile:
  #   runs-on: self-hoster-linux-x64  #ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Checkout another public repository
  #       uses: actions/checkout@v3
  #       with:
  #         repository: kcmchandramouli/java-bank
  #         path: java-bank

  #     - name: setup JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'
  #         cache: 'maven'

  #     - name: Maven Build
  #       run: |
  #         cd java-bank  
  #         mvn compile
  # #mvn -B package --file java-bank/pom.xml

  # security-check:
  #   runs-on: self-hoster-linux-x64  #ubuntu-latest
  #   needs: maven-compile

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Checkout another public repository
  #       uses: actions/checkout@v3
  #       with:
  #         repository: kcmchandramouli/java-bank
  #         path: java-bank

  #     - name: Trivy Installation
  #       run: |
  #         sudo apt-get install wget apt-transport-https gnupg lsb-release -y
  #         wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
  #         echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
  #         sudo apt-get update -y
  #         sudo apt-get install trivy -y

  #     - name: Trivy Fs Scan
  #       run: trivy fs --format table -o fs-report.json .

  #     - name: Gitleaks Installation
  #       run: sudo apt-get install gitleaks -y

  #     - name: Gitleaks Code Scan
  #       run: gitleaks detect --source . -r gitileaks-report.json --report-format json -f json

  # maven-test:
  #   runs-on: self-hoster-linux-x64  #ubuntu-latest
  #   needs: maven-compile

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Checkout another public repository
  #       uses: actions/checkout@v3
  #       with:
  #         repository: kcmchandramouli/java-bank
  #         path: java-bank

  #     - name: setup JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'
  #         cache: 'maven'

  #     - name: Maven unit test
  #       run: |
  #         cd java-bank  
  #         mvn test

  # SonarQube-Analysis:
  #   runs-on: self-hoster-linux-x64  #ubuntu-latest
  #   needs: maven-test

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Checkout another public repository
  #       uses: actions/checkout@v3
  #       with:
  #         repository: kcmchandramouli/java-bank
  #         path: java-bank

  #     - name: setup JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'
  #         cache: 'maven'

  #     - name: Maven Build & package
  #       run: |
  #         cd java-bank  
  #         mvn package

  #     - name: Upload JAR artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: java-bank-jar
  #         path: java-bank/target/*.jar

  #     - name: SonarQube Scan
  #       uses: SonarSource/sonarqube-scan-action@v5.1.0
  #             # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  #     # Check the Quality Gate status.
  #     - name: SonarQube Quality Gate check
  #       id: sonarqube-quality-gate-check
  #       uses: sonarsource/sonarqube-quality-gate-action@master
  #       with:
  #         pollingTimeoutSec: 600
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  # docker_build-push:
  #   runs-on: self-hoster-linux-x64  #ubuntu-latest
  #   needs: SonarQube-Analysis

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Checkout another public repository
  #       uses: actions/checkout@v3
  #       with:
  #         repository: kcmchandramouli/java-bank
  #         path: java-bank

  #     - name: Download JAR artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: java-bank-jar
  #         path: java-bank/target

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ vars.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build Docker Image
  #       uses: docker/build-push-action@v6
  #       with:
  #         push: false
  #         tags: kcmchandramoulli/java-bank:latest

  #     - name: Trivy Installation
  #       run: |
  #         sudo apt-get install wget apt-transport-https gnupg lsb-release -y
  #         wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
  #         echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
  #         sudo apt-get update -y
  #         sudo apt-get install trivy -y
  
  #     - name: Trivy image Scan
  #       run: trivy image --format table -o image-report.html kcmchandramoulli/java-bank:latest

  #     - name: Push Docker Image
  #       uses: docker/build-push-action@v6
  #       with:
  #         push: true
  #         tags: kcmchandramoulli/java-bank:latest

  deploy_to_AKS:
    runs-on: self-hoster-linux-x64  #ubuntu-latest
    # needs: docker_build-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: azure/setup-kubectl@v4
        with:
           version: latest # default is latest stable
        id: install

      - name: kubectl version check
        run: kubectl version --client

      # - name: Set up Azure Kubernetes Service (AKS)
      #   uses: azure/aks-set-context@v2
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      #     cluster-name: ${{ vars.AKS_CLUSTER_NAME }}
      #     resource-group: ${{ vars.AKS_RESOURCE_GROUP }}

      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to AKS
        run: |
          kubectl apply -f ds.yml